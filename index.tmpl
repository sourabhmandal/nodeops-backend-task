<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>API Call Demo</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            background-color: #f5f5f5;
            overflow: hidden;
        }

        h1 {
            color: #333;
        }

        p {
            margin-bottom: 10px;
        }

        button {
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            font-size: 16px;
        }

        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
         #node-status {
            font-weight: bold;
            padding: 10px;
            border-radius: 4px;
            width: 300px
        }

        #node-status.up {
            border: 2px solid #4CAF50;
            background-color: #e6f7e8;
        }

        #node-status.down {
            border: 2px solid #f44336;
            background-color: #ffebe6;
        }
    </style>
</head>
<body>
<div>
	<h1>heloo</h1>
    <p>Click the button to start / stop the node</p>
    <button type="button" id="node-button" onclick="manageNode()">Start Node</button>
    <br>
    <p id="node-status" class="up"></p>
</div>
    <script>    
    const CHECK_URL = "/check";
    const START_URL = "/start";
    const WAIT_URL = "/wait";
    const DOWN_URL = "/down";
    const startButtonText = "Start Node";
    const stopButtonText = "Stop Node";

    const buttonElement = document.getElementById("node-button");
    const nodeStatusElement = document.getElementById("node-status");

    function updateNodeStatus(data) {
    console.log(data);

    // Update node status based on the data
    if (data.ok === false) {
        buttonElement.textContent = startButtonText;
        nodeStatusElement.classList.remove("up", "down");
        nodeStatusElement.classList.add("down");
        nodeStatusElement.textContent = data.error;
    } else {
        buttonElement.textContent = stopButtonText;
        nodeStatusElement.classList.remove("up", "down");
        nodeStatusElement.classList.add("up");
        nodeStatusElement.textContent = data.status ?? "node is up and running";
    }
    }

    async function fetchData(url) {
    try {
        const response = await fetch(url);
        const data = await response.json();

        if (data.ok == true) {
        return data;
        }
        if (data.error) throw new Error(data.error);
        else throw new Error("unhandled error occured");
    } catch (error) {
        return {
        ok: false,
        error: error.toString(),
        };
    }
    }

    async function manageNode() {
    buttonElement.disabled = true;

    try {
        const buttonText = buttonElement.textContent;

        if (buttonText === startButtonText) {
        updateNodeStatus({ ok: true, status: "node is starting..." });
        // nodeStatusElement.textContent = "node is starting...";
        const startData = await fetchData(START_URL);

        if (startData.ok === true) {
            const waitData = await fetchData(WAIT_URL);
            if (waitData.ok === true) {
            const checkData = await fetchData(CHECK_URL);
            updateNodeStatus(checkData);
            return;
            } else {
            updateNodeStatus(waitData);
            return;
            }
        } else {
            updateNodeStatus(startData);
        }
        } else {
        updateNodeStatus({ ok: false, error: "node is stopping..." });

        // nodeStatusElement.textContent =;

        const downData = await fetchData(DOWN_URL);
        if (downData.ok === true) {
            const checkData = await fetchData(CHECK_URL);
            updateNodeStatus(checkData);
            return;
        } else {
            updateNodeStatus(downData);
            return;
        }
        }
    } catch (error) {
        // Handle generic errors
    } finally {
        buttonElement.disabled = false;
    }
    }

    (async () => {
    try {
        const checkData = await fetchData(CHECK_URL);
        updateNodeStatus(checkData);
    } catch (error) {
        console.error(error);
    }
    })();

    </script>
</body>
</html>
